/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "sleep.h"
#include "zrcar.h"

void car_stop()
{
	zrcar_wheel_l_set(0);
	zrcar_wheel_r_set(0);
}
void car_forward(int speed)
{
	zrcar_wheel_l_set(speed);
	zrcar_wheel_r_set(speed);
}
void car_back(int speed)
{
	zrcar_wheel_l_set(-speed);
	zrcar_wheel_r_set(-speed);
}
void car_right(int speed )
{
	zrcar_wheel_l_set(speed);
	zrcar_wheel_r_set(-speed);
}
void car_left(int speed)
{
	zrcar_wheel_l_set(-speed);
	zrcar_wheel_r_set(speed);
}
int main()
{
	/*********init*******/
	zrcar_wheel_init();
	zrcar_ultra_init();
	float ult_data[3];
	 //car_forward(3000);

	 int i;
	 print("start\n");
	while(1)
	{
		zrcar_ultra_get_all(ult_data);
				for(i = 1; i < 4; i++)
					{
							printf("u%d : %f mm  ",i , ult_data[i-1]);
					}
					   printf("\n");
				if((ult_data[2] >0 &&ult_data[2] < 300) &&(ult_data[1] >0 &&ult_data[1] < 300) &&(ult_data[0]>0) && (ult_data[0]<300))
				{
							car_back(700);
							sleep(1);    //delay
							if (ult_data[0]>=ult_data[2])
							{
									car_left(600);
									usleep(600000);
									car_stop();
									 print("finally1\n");

							}

							else
							{
									car_right(600);
									usleep(600000);
									car_stop();
									 print("finally2\n");
							}

				}
				else if((ult_data[2] >0 &&ult_data[2] < 300) &&(ult_data[1] >0 &&ult_data[1] < 300)&&(ult_data[0]>300))
				{
							car_back(700);
							sleep(1);    //delay
							car_left(600);
							usleep(600000);
							car_stop();
							 print("finally3\n");

				}
				else if((ult_data[0] >0 &&ult_data[0] < 300) &&(ult_data[1] >0 &&ult_data[1] < 300)&&(ult_data[2]>300))
				{
							car_back(700);
							sleep(1);    //delay
							car_right(600);
							usleep(600000);
							car_stop();
							 print("finally4\n");
				}
				else if((ult_data[1] >0 &&ult_data[1] < 300 )&&((ult_data[0] > 300))&&(ult_data[2]>300))
				{
							if (ult_data[0]>=ult_data[2])

							{
								car_back(700);
								sleep(1);    //delay
								car_left(600);
								usleep(600000);
								car_stop();
								 print("finally5\n");
							}

							else
							{
								car_back(700);
								sleep(1);    //delay
								car_right(600);
								usleep(600000);
								car_stop();
								 print("finally6\n");
							}
				}
				else
				{
					         car_forward(400);
					         usleep(50000);
					         car_stop();
					         print("finally7\n");
				}


	}

    return 0;
}

