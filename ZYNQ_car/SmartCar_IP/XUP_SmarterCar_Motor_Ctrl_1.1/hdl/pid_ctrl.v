// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pid_ctrl,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.354000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module pid_ctrl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        io_port_err_in,
        io_port_kp_parameter,
        io_port_ki_parameter,
        io_port_out_max,
        io_port_out_min,
        io_port_ui_limit,
        io_port_set_ui_temp_en,
        io_port_set_ui_temp,
        io_port_out,
        io_port_out_ap_vld,
        io_port_out_sign,
        io_port_out_sign_ap_vld,
        io_port_usign_out,
        io_port_usign_out_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] io_port_err_in;
input  [15:0] io_port_kp_parameter;
input  [15:0] io_port_ki_parameter;
input  [15:0] io_port_out_max;
input  [15:0] io_port_out_min;
input  [31:0] io_port_ui_limit;
input  [7:0] io_port_set_ui_temp_en;
input  [31:0] io_port_set_ui_temp;
output  [15:0] io_port_out;
output   io_port_out_ap_vld;
output  [7:0] io_port_out_sign;
output   io_port_out_sign_ap_vld;
output  [15:0] io_port_usign_out;
output   io_port_usign_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg io_port_out_ap_vld;
reg io_port_out_sign_ap_vld;
reg io_port_usign_out_ap_vld;
reg   [1:0] ap_CS_fsm = 2'b00;
reg   [31:0] ui_temp = 32'b00000000000000000000000000000000;
wire   [31:0] tmp_1_fu_150_p1;
reg   [31:0] tmp_1_reg_396;
wire   [31:0] tmp_6_fu_164_p2;
reg   [31:0] tmp_6_reg_401;
reg   [23:0] tmp_8_reg_410;
reg   [15:0] out_2_reg_416;
wire   [31:0] ui_temp_new_fu_222_p3;
reg   [31:0] ui_temp_new_reg_421;
reg   [15:0] tmp_11_reg_427;
wire   [0:0] sel_tmp7_fu_319_p2;
reg   [0:0] sel_tmp7_reg_437;
wire   [15:0] out_5_fu_340_p3;
reg   [15:0] out_5_reg_442;
wire   [31:0] ui_temp_new_1_fu_325_p3;
wire   [15:0] out_6_fu_354_p3;
wire   [0:0] tmp_fu_132_p2;
wire   [15:0] tmp_5_fu_158_p0;
wire   [15:0] tmp_5_fu_158_p1;
wire   [31:0] ui_temp_loc_fu_142_p3;
wire   [31:0] tmp_5_fu_158_p2;
wire   [15:0] up_temp_fu_174_p0;
wire   [15:0] up_temp_fu_174_p1;
wire   [31:0] up_temp_fu_174_p2;
wire   [31:0] tmp_s_fu_204_p2;
wire   [0:0] tmp_10_fu_210_p2;
wire   [0:0] tmp_7_fu_199_p2;
wire   [31:0] tmp_10_tmp_6_fu_215_p3;
wire   [23:0] tmp_9_fu_244_p1;
wire   [23:0] tmp_3_fu_253_p1;
wire   [15:0] out_3_fu_258_p2;
wire   [0:0] tmp_13_fu_268_p2;
wire   [0:0] tmp_9_fu_244_p2;
wire   [0:0] tmp_3_fu_253_p2;
wire   [0:0] sel_tmp1_fu_288_p2;
wire   [0:0] sel_tmp2_fu_294_p2;
wire   [31:0] sel_tmp_fu_282_p3;
wire   [0:0] sel_tmp6_demorgan_fu_307_p2;
wire   [0:0] tmp_12_fu_262_p2;
wire   [0:0] sel_tmp6_fu_313_p2;
wire   [31:0] sel_tmp3_fu_300_p3;
wire   [15:0] out_5_out_3_fu_274_p3;
wire   [15:0] out_4_fu_332_p3;
wire   [0:0] tmp_14_fu_360_p3;
wire   [15:0] tmp_15_fu_368_p2;
wire   [0:0] tmp_16_fu_383_p3;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        out_2_reg_416 <= {{up_temp_fu_174_p2[ap_const_lv32_17 : ap_const_lv32_8]}};
        tmp_11_reg_427 <= {{ui_temp_new_fu_222_p3[ap_const_lv32_17 : ap_const_lv32_8]}};
        tmp_8_reg_410 <= {{up_temp_fu_174_p2[ap_const_lv32_1F : ap_const_lv32_8]}};
        ui_temp_new_reg_421 <= ui_temp_new_fu_222_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        out_5_reg_442 <= out_5_fu_340_p3;
        sel_tmp7_reg_437 <= sel_tmp7_fu_319_p2;
        ui_temp <= ui_temp_new_1_fu_325_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_1_reg_396 <= tmp_1_fu_150_p1;
        tmp_6_reg_401 <= tmp_6_fu_164_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// io_port_out_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        io_port_out_ap_vld = ap_const_logic_1;
    end else begin
        io_port_out_ap_vld = ap_const_logic_0;
    end
end

/// io_port_out_sign_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        io_port_out_sign_ap_vld = ap_const_logic_1;
    end else begin
        io_port_out_sign_ap_vld = ap_const_logic_0;
    end
end

/// io_port_usign_out_ap_vld assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        io_port_usign_out_ap_vld = ap_const_logic_1;
    end else begin
        io_port_usign_out_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign io_port_out = out_6_fu_354_p3;
assign io_port_out_sign = $unsigned(tmp_16_fu_383_p3);
assign io_port_usign_out = ((tmp_14_fu_360_p3)? tmp_15_fu_368_p2: out_6_fu_354_p3);
assign out_3_fu_258_p2 = (tmp_11_reg_427 + out_2_reg_416);
assign out_4_fu_332_p3 = ((tmp_9_fu_244_p2)? io_port_out_max: out_5_out_3_fu_274_p3);
assign out_5_fu_340_p3 = ((sel_tmp2_fu_294_p2)? io_port_out_min: out_4_fu_332_p3);
assign out_5_out_3_fu_274_p3 = ((tmp_13_fu_268_p2)? io_port_out_min: out_3_fu_258_p2);
assign out_6_fu_354_p3 = ((sel_tmp7_reg_437)? io_port_out_max: out_5_reg_442);
assign sel_tmp1_fu_288_p2 = (tmp_9_fu_244_p2 ^ ap_const_lv1_1);
assign sel_tmp2_fu_294_p2 = (tmp_3_fu_253_p2 & sel_tmp1_fu_288_p2);
assign sel_tmp3_fu_300_p3 = ((sel_tmp2_fu_294_p2)? tmp_6_reg_401: sel_tmp_fu_282_p3);
assign sel_tmp6_demorgan_fu_307_p2 = (tmp_9_fu_244_p2 | tmp_3_fu_253_p2);
assign sel_tmp6_fu_313_p2 = (sel_tmp6_demorgan_fu_307_p2 ^ ap_const_lv1_1);
assign sel_tmp7_fu_319_p2 = (tmp_12_fu_262_p2 & sel_tmp6_fu_313_p2);
assign sel_tmp_fu_282_p3 = ((tmp_9_fu_244_p2)? tmp_6_reg_401: ui_temp_new_reg_421);
assign tmp_10_fu_210_p2 = ($signed(tmp_6_reg_401) < $signed(tmp_s_fu_204_p2)? 1'b1: 1'b0);
assign tmp_10_tmp_6_fu_215_p3 = ((tmp_10_fu_210_p2)? tmp_s_fu_204_p2: tmp_6_reg_401);
assign tmp_12_fu_262_p2 = ($signed(out_3_fu_258_p2) > $signed(io_port_out_max)? 1'b1: 1'b0);
assign tmp_13_fu_268_p2 = ($signed(out_3_fu_258_p2) < $signed(io_port_out_min)? 1'b1: 1'b0);
assign tmp_14_fu_360_p3 = out_6_fu_354_p3[ap_const_lv32_F];
assign tmp_15_fu_368_p2 = (ap_const_lv16_0 - out_6_fu_354_p3);
assign tmp_16_fu_383_p3 = out_6_fu_354_p3[ap_const_lv32_F];
assign tmp_1_fu_150_p1 = $signed(io_port_err_in);
assign tmp_3_fu_253_p1 = $signed(io_port_out_min);
assign tmp_3_fu_253_p2 = ($signed(tmp_8_reg_410) < $signed(tmp_3_fu_253_p1)? 1'b1: 1'b0);
assign tmp_5_fu_158_p0 = io_port_ki_parameter;
assign tmp_5_fu_158_p1 = io_port_err_in;
assign tmp_5_fu_158_p2 = ($signed(tmp_5_fu_158_p0) * $signed(tmp_5_fu_158_p1));
assign tmp_6_fu_164_p2 = (ui_temp_loc_fu_142_p3 + tmp_5_fu_158_p2);
assign tmp_7_fu_199_p2 = ($signed(tmp_6_reg_401) > $signed(io_port_ui_limit)? 1'b1: 1'b0);
assign tmp_9_fu_244_p1 = $signed(io_port_out_max);
assign tmp_9_fu_244_p2 = ($signed(tmp_8_reg_410) > $signed(tmp_9_fu_244_p1)? 1'b1: 1'b0);
assign tmp_fu_132_p2 = (io_port_set_ui_temp_en == ap_const_lv8_1? 1'b1: 1'b0);
assign tmp_s_fu_204_p2 = (ap_const_lv32_0 - io_port_ui_limit);
assign ui_temp_loc_fu_142_p3 = ((tmp_fu_132_p2)? io_port_set_ui_temp: ui_temp);
assign ui_temp_new_1_fu_325_p3 = ((sel_tmp7_fu_319_p2)? ui_temp_new_reg_421: sel_tmp3_fu_300_p3);
assign ui_temp_new_fu_222_p3 = ((tmp_7_fu_199_p2)? io_port_ui_limit: tmp_10_tmp_6_fu_215_p3);
assign up_temp_fu_174_p0 = io_port_kp_parameter;
assign up_temp_fu_174_p1 = tmp_1_reg_396;
assign up_temp_fu_174_p2 = ($signed(up_temp_fu_174_p0) * $signed(up_temp_fu_174_p1));


endmodule //pid_ctrl

